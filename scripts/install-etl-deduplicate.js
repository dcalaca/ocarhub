import { readFileSync } from 'fs'

async function installETLDeduplicate() {
  console.log('üîÑ Instalando sistema ETL com deduplica√ß√£o pr√©via...\n')

  try {
    // Ler o SQL
    const sql = readFileSync('database/etl-deduplicate-first.sql', 'utf8')
    
    console.log('üìù SQL para executar no Supabase SQL Editor:')
    console.log('=' .repeat(80))
    console.log(sql)
    console.log('=' .repeat(80))
    
    console.log('\n‚úÖ Execute o SQL acima no Supabase SQL Editor!')
    console.log('   URL: https://supabase.com/dashboard/project/kfsteismyqpekbaqwuez/sql')
    
    console.log('\nüîÑ Este sistema ETL com deduplica√ß√£o pr√©via:')
    console.log('   ‚Ä¢ Deduplica dados ANTES de inserir')
    console.log('   ‚Ä¢ Usa SELECT DISTINCT para eliminar duplicatas')
    console.log('   ‚Ä¢ Evita erro "ON CONFLICT DO UPDATE command cannot affect row a second time"')
    console.log('   ‚Ä¢ Migra dados da ocar_transbordo')
    console.log('   ‚Ä¢ Cria fun√ß√µes auxiliares para consulta')
    console.log('   ‚Ä¢ Testa o sistema com dados reais')
    
    console.log('\n‚ú® ESTRAT√âGIA:')
    console.log('   ‚Ä¢ SELECT DISTINCT elimina duplicatas na fonte')
    console.log('   ‚Ä¢ ON CONFLICT DO NOTHING para dados existentes')
    console.log('   ‚Ä¢ ON CONFLICT DO UPDATE para pre√ßos (atualiza valores)')
    console.log('   ‚Ä¢ Sistema robusto e √† prova de falhas')
    
    console.log('\n‚ö†Ô∏è IMPORTANTE:')
    console.log('   ‚Ä¢ A tabela ocar_transbordo N√ÉO ser√° limpa')
    console.log('   ‚Ä¢ Apenas os dados ser√£o migrados para as tabelas normalizadas')
    console.log('   ‚Ä¢ Sistema estar√° pronto para consultas do frontend')
    console.log('   ‚Ä¢ Duplicatas s√£o eliminadas na fonte')
    
  } catch (error) {
    console.error('Erro ao ler arquivo SQL:', error.message)
  }
}

installETLDeduplicate()
