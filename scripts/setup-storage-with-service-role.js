const { createClient } = require('@supabase/supabase-js')

// Usar service role key para ter permiss√µes administrativas
const supabaseUrl = 'https://kfsteismyqpekbaqwuez.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtmc3RlaXNteXFwZWtiYXF3dWV6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTQ4NTg0MywiZXhwIjoyMDY1MDYxODQzfQ.4pcJS-lSfxwkfp4VoYMFqsgrpSf8qV-LYcVsjdY1nkw'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function setupStoragePolicies() {
  try {
    console.log('üîß Configurando pol√≠ticas RLS para storage...')
    
    // 1. Habilitar RLS
    console.log('1Ô∏è‚É£ Habilitando RLS...')
    const { error: rlsError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;'
    })
    
    if (rlsError) {
      console.log('‚ö†Ô∏è RLS j√° estava habilitado ou erro:', rlsError.message)
    } else {
      console.log('‚úÖ RLS habilitado')
    }
    
    // 2. Remover pol√≠ticas existentes
    console.log('2Ô∏è‚É£ Removendo pol√≠ticas existentes...')
    const policies = [
      'Public read access for vehicle photos',
      'Authenticated users can upload vehicle photos', 
      'Users can update vehicle photos',
      'Users can delete vehicle photos'
    ]
    
    for (const policy of policies) {
      const { error } = await supabase.rpc('exec_sql', {
        sql: `DROP POLICY IF EXISTS "${policy}" ON storage.objects;`
      })
      if (error) {
        console.log(`‚ö†Ô∏è Erro ao remover pol√≠tica ${policy}:`, error.message)
      }
    }
    
    // 3. Criar pol√≠tica de leitura p√∫blica
    console.log('3Ô∏è‚É£ Criando pol√≠tica de leitura p√∫blica...')
    const { error: readError } = await supabase.rpc('exec_sql', {
      sql: `CREATE POLICY "Public read access for vehicle photos" ON storage.objects
            FOR SELECT USING (bucket_id = 'vehicle-photos');`
    })
    
    if (readError) {
      console.error('‚ùå Erro ao criar pol√≠tica de leitura:', readError)
    } else {
      console.log('‚úÖ Pol√≠tica de leitura criada')
    }
    
    // 4. Criar pol√≠tica de upload
    console.log('4Ô∏è‚É£ Criando pol√≠tica de upload...')
    const { error: uploadError } = await supabase.rpc('exec_sql', {
      sql: `CREATE POLICY "Authenticated users can upload vehicle photos" ON storage.objects
            FOR INSERT WITH CHECK (
              bucket_id = 'vehicle-photos' 
              AND auth.role() = 'authenticated'
            );`
    })
    
    if (uploadError) {
      console.error('‚ùå Erro ao criar pol√≠tica de upload:', uploadError)
    } else {
      console.log('‚úÖ Pol√≠tica de upload criada')
    }
    
    // 5. Criar pol√≠tica de atualiza√ß√£o
    console.log('5Ô∏è‚É£ Criando pol√≠tica de atualiza√ß√£o...')
    const { error: updateError } = await supabase.rpc('exec_sql', {
      sql: `CREATE POLICY "Users can update vehicle photos" ON storage.objects
            FOR UPDATE USING (
              bucket_id = 'vehicle-photos' 
              AND auth.role() = 'authenticated'
            );`
    })
    
    if (updateError) {
      console.error('‚ùå Erro ao criar pol√≠tica de atualiza√ß√£o:', updateError)
    } else {
      console.log('‚úÖ Pol√≠tica de atualiza√ß√£o criada')
    }
    
    // 6. Criar pol√≠tica de exclus√£o
    console.log('6Ô∏è‚É£ Criando pol√≠tica de exclus√£o...')
    const { error: deleteError } = await supabase.rpc('exec_sql', {
      sql: `CREATE POLICY "Users can delete vehicle photos" ON storage.objects
            FOR DELETE USING (
              bucket_id = 'vehicle-photos' 
              AND auth.role() = 'authenticated'
            );`
    })
    
    if (deleteError) {
      console.error('‚ùå Erro ao criar pol√≠tica de exclus√£o:', deleteError)
    } else {
      console.log('‚úÖ Pol√≠tica de exclus√£o criada')
    }
    
    // 7. Verificar pol√≠ticas criadas
    console.log('7Ô∏è‚É£ Verificando pol√≠ticas criadas...')
    const { data: policiesList, error: listError } = await supabase.rpc('exec_sql', {
      sql: `SELECT policyname FROM pg_policies 
            WHERE tablename = 'objects' AND schemaname = 'storage';`
    })
    
    if (listError) {
      console.error('‚ùå Erro ao listar pol√≠ticas:', listError)
    } else {
      console.log('üìã Pol√≠ticas encontradas:', policiesList)
    }
    
    console.log('üéâ Configura√ß√£o de storage conclu√≠da!')
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

setupStoragePolicies()
