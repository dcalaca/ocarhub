/**
 * Script para configurar o Supabase Storage para fotos de ve√≠culos
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function setupStorage() {
  try {
    console.log('üöÄ Configurando Supabase Storage...')

    // Criar bucket para fotos de ve√≠culos
    const { data: bucket, error: bucketError } = await supabase.storage.createBucket('vehicle-photos', {
      public: true,
      allowedMimeTypes: ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],
      fileSizeLimit: 5242880, // 5MB
    })

    if (bucketError) {
      if (bucketError.message.includes('already exists')) {
        console.log('‚úÖ Bucket "vehicle-photos" j√° existe')
      } else {
        console.error('‚ùå Erro ao criar bucket:', bucketError)
        throw bucketError
      }
    } else {
      console.log('‚úÖ Bucket "vehicle-photos" criado com sucesso')
    }

    // Configurar pol√≠ticas RLS para o bucket
    console.log('üîê Configurando pol√≠ticas de acesso...')
    
    // Pol√≠tica para permitir leitura p√∫blica
    const { error: readPolicyError } = await supabase.rpc('create_storage_policy', {
      bucket_name: 'vehicle-photos',
      policy_name: 'Public read access for vehicle photos',
      policy_definition: 'true',
      policy_check: 'true',
      policy_roles: 'public'
    })

    if (readPolicyError && !readPolicyError.message.includes('already exists')) {
      console.error('‚ùå Erro ao criar pol√≠tica de leitura:', readPolicyError)
    } else {
      console.log('‚úÖ Pol√≠tica de leitura p√∫blica configurada')
    }

    // Pol√≠tica para permitir upload apenas para usu√°rios autenticados
    const { error: writePolicyError } = await supabase.rpc('create_storage_policy', {
      bucket_name: 'vehicle-photos',
      policy_name: 'Authenticated users can upload vehicle photos',
      policy_definition: 'auth.role() = \'authenticated\'',
      policy_check: 'auth.role() = \'authenticated\'',
      policy_roles: 'authenticated'
    })

    if (writePolicyError && !writePolicyError.message.includes('already exists')) {
      console.error('‚ùå Erro ao criar pol√≠tica de upload:', writePolicyError)
    } else {
      console.log('‚úÖ Pol√≠tica de upload para usu√°rios autenticados configurada')
    }

    console.log('üéâ Configura√ß√£o do Storage conclu√≠da!')
    console.log('üìù Pr√≥ximos passos:')
    console.log('   1. Teste o upload de fotos na p√°gina de an√∫ncio')
    console.log('   2. Verifique se as imagens aparecem em "Meus An√∫ncios"')

  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o do Storage:', error)
    process.exit(1)
  }
}

setupStorage()
