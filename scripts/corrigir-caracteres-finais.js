const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function corrigirCaracteres() {
  try {
    console.log('üîß Corrigindo caracteres especiais nas tabelas...');
    
    // Buscar estados com caracteres problem√°ticos
    const { data: estados, error: errorEstados } = await supabase
      .from('ocar_estados')
      .select('*');
    
    if (errorEstados) {
      console.error('‚ùå Erro ao buscar estados:', errorEstados);
      return;
    }
    
    console.log(`üìä Encontrados ${estados.length} estados`);
    
    // Corre√ß√µes espec√≠ficas
    const correcoes = {
      'Amap??': 'Amap√°',
      'Cear??': 'Cear√°',
      'Esp??rito Santo': 'Esp√≠rito Santo',
      'Goi??s': 'Goi√°s',
      'Maranh??o': 'Maranh√£o',
      'Par??': 'Par√°',
      'Para??ba': 'Para√≠ba',
      'Paran??': 'Paran√°',
      'Piau??': 'Piau√≠',
      'Rond??nia': 'Rond√¥nia',
      'S??o Paulo': 'S√£o Paulo'
    };
    
    // Corrigir estados
    for (const estado of estados) {
      const nomeCorrigido = correcoes[estado.nome] || estado.nome;
      
      if (nomeCorrigido !== estado.nome) {
        console.log(`üîß Corrigindo: ${estado.nome} ‚Üí ${nomeCorrigido}`);
        
        const { error } = await supabase
          .from('ocar_estados')
          .update({ nome: nomeCorrigido })
          .eq('id', estado.id);
        
        if (error) {
          console.error(`‚ùå Erro ao corrigir estado ${estado.nome}:`, error);
        } else {
          console.log(`‚úÖ Estado corrigido: ${nomeCorrigido}`);
        }
      }
    }
    
    // Buscar munic√≠pios com caracteres problem√°ticos
    const { data: municipios, error: errorMunicipios } = await supabase
      .from('ocar_municipios')
      .select('*')
      .limit(1000);
    
    if (errorMunicipios) {
      console.error('‚ùå Erro ao buscar munic√≠pios:', errorMunicipios);
      return;
    }
    
    console.log(`üìä Verificando ${municipios.length} munic√≠pios...`);
    
    // Corrigir munic√≠pios
    let corrigidos = 0;
    for (const municipio of municipios) {
      let nomeCorrigido = municipio.nome;
      
      // Aplicar corre√ß√µes comuns
      nomeCorrigido = nomeCorrigido
        .replace(/√É¬°/g, '√°')
        .replace(/√É /g, '√†')
        .replace(/√É¬¢/g, '√¢')
        .replace(/√É¬£/g, '√£')
        .replace(/√É¬©/g, '√©')
        .replace(/√É¬™/g, '√™')
        .replace(/√É¬≠/g, '√≠')
        .replace(/√É¬≥/g, '√≥')
        .replace(/√É¬¥/g, '√¥')
        .replace(/√É¬µ/g, '√µ')
        .replace(/√É¬∫/g, '√∫')
        .replace(/√É¬ß/g, '√ß')
        .replace(/√É/g, '√Å')
        .replace(/√É‚Ä∞/g, '√â')
        .replace(/√É≈†/g, '√ä')
        .replace(/√É≈í/g, '√ç')
        .replace(/√É"/g, '√ì')
        .replace(/√É"/g, '√î')
        .replace(/√É‚Ä¢/g, '√ï')
        .replace(/√É≈°/g, '√ö')
        .replace(/√É‚Ä°/g, '√á');
      
      if (nomeCorrigido !== municipio.nome) {
        const { error } = await supabase
          .from('ocar_municipios')
          .update({ nome: nomeCorrigido })
          .eq('id', municipio.id);
        
        if (!error) {
          corrigidos++;
          if (corrigidos <= 10) {
            console.log(`üîß Munic√≠pio: ${municipio.nome} ‚Üí ${nomeCorrigido}`);
          }
        }
      }
    }
    
    console.log(`‚úÖ Corre√ß√£o conclu√≠da!`);
    console.log(`üìä Estados corrigidos: ${Object.keys(correcoes).length}`);
    console.log(`üìä Munic√≠pios corrigidos: ${corrigidos}`);
    
  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error);
  }
}

corrigirCaracteres();
