import { NextRequest, NextResponse } from 'next/server';

export async function GET() {
  try {
    console.log('üîç Analisando problema espec√≠fico do sandbox...');
    
    if (!process.env.MP_ACCESS_TOKEN) {
      return NextResponse.json({
        success: false,
        error: 'MP_ACCESS_TOKEN n√£o configurado'
      }, { status: 500 });
    }

    // Verificar se √© realmente sandbox
    const token = process.env.MP_ACCESS_TOKEN;
    const isSandbox = token.includes('TEST') || token.includes('test') || token.includes('APP_USR-');
    
    console.log('üß™ Modo detectado:', isSandbox ? 'SANDBOX' : 'PRODU√á√ÉO');

    // Informa√ß√µes sobre o problema do sandbox
    const sandboxInfo = {
      isSandbox,
      tokenPrefix: token.substring(0, 10),
      commonIssues: [
        'Cart√µes de teste podem ter restri√ß√µes espec√≠ficas',
        'Alguns cart√µes s√≥ funcionam em certas condi√ß√µes',
        'O ambiente sandbox pode ter limita√ß√µes tempor√°rias',
        'Cart√µes podem estar bloqueados por seguran√ßa',
        'Pode ser necess√°rio usar cart√µes espec√≠ficos da regi√£o'
      ],
      solutions: [
        'Tentar cart√µes diferentes da lista oficial',
        'Verificar se o cart√£o est√° na lista de cart√µes v√°lidos',
        'Usar cart√µes espec√≠ficos para o Brasil',
        'Verificar se h√° restri√ß√µes no painel do Mercado Pago',
        'Contatar suporte do Mercado Pago se persistir'
      ],
      officialCards: {
        brazil: [
          {
            name: 'Visa Aprovado (Brasil)',
            number: '4009 1753 3280 6176',
            cvv: '123',
            expiry: '11/25',
            holder: 'APRO'
          },
          {
            name: 'Mastercard Aprovado (Brasil)',
            number: '5031 4332 1540 6351',
            cvv: '123',
            expiry: '11/30',
            holder: 'APRO'
          },
          {
            name: 'Visa Alternativo (Brasil)',
            number: '4235 6477 2802 5682',
            cvv: '123',
            expiry: '11/30',
            holder: 'APRO'
          }
        ],
        international: [
          {
            name: 'Visa Internacional',
            number: '4000 0000 0000 0001',
            cvv: '123',
            expiry: '11/25',
            holder: 'TEST'
          },
          {
            name: 'Mastercard Internacional',
            number: '5031 4332 1540 6351',
            cvv: '123',
            expiry: '11/30',
            holder: 'TEST'
          }
        ]
      },
      troubleshooting: [
        '1. Verifique se est√° no ambiente sandbox correto',
        '2. Use cart√µes espec√≠ficos para o Brasil',
        '3. Digite o nome exatamente como mostrado',
        '4. Use CVV e vencimento corretos',
        '5. Se persistir, pode ser limita√ß√£o do sandbox',
        '6. Considere usar credenciais de produ√ß√£o para testes finais'
      ]
    };

    return NextResponse.json({
      success: true,
      message: 'An√°lise do problema do sandbox conclu√≠da',
      sandboxInfo,
      nextSteps: [
        'Execute /api/test-mp-cards para testar todos os cart√µes',
        'Use os cart√µes espec√≠ficos para o Brasil',
        'Se nenhum funcionar, pode ser limita√ß√£o do sandbox',
        'Considere contatar suporte do Mercado Pago'
      ]
    });

  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Erro interno na an√°lise',
      details: error instanceof Error ? error.message : 'Erro desconhecido'
    }, { status: 500 });
  }
}
